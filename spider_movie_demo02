from bs4 import BeautifulSoup
import re
import urllib.request, urllib.error
import xlwt
import psycopg2
from psycopg2.extras import execute_values

findLink = re.compile(r'<a href="(.*?)">')
findImgSrc = re.compile(r'<img.*src="(.*?)"', re.S)
findTitle = re.compile(r'<span class="title">(.*)</span>')
findRating = re.compile(r'<span class="rating_num" property="v:average">(.*)</span>')
findJudge = re.compile(r'<span>(\d*)人评价</span>')
findInq = re.compile(r'<span class="inq">(.*)</span>')
findBd = re.compile(r'<p class="">(.*?)</p>', re.S)

def main():
    baseUrl = "https://movie.douban.com/top250?start="

    dataList = getData(baseUrl)

    dataList.sort(key=lambda x: x[4], reverse=True) # 按评分倒序

    # savePath = "D:\\pythonDemoPic\\豆瓣电影Top250.xls"
    #
    # saveData(dataList,savePath)

    process_item(dataList)

# 爬取网页
def getData(baseUrl):
    datalist = []  #用来存储爬取的网页信息
    for i in range(0, 10):  # 调用获取页面信息的函数，10次，每次25条
        url = baseUrl + str(i * 25)
        html = askURL(url)  # 保存获取到的网页源码
        soup = BeautifulSoup(html, "html.parser")

        for item in soup.find_all('div', attrs={'class': 'item'}):  # 查找符合要求的字符串
            data = []  # 保存一部电影所有信息
            item = str(item)
            link = re.findall(findLink, item)[0]  # 通过正则表达式查找
            data.append(link)       # movie_main_url
            imgSrc = re.findall(findImgSrc, item)[0]
            data.append(imgSrc)     # movie_pic_url
            titles = re.findall(findTitle, item)
            if (len(titles) == 2):
                ctitle = titles[0]
                data.append(ctitle)     # chinese_name
                otitle = titles[1].replace("/", "")  #消除转义字符
                data.append(otitle)     # foreign_name
            else:
                data.append(titles[0])
                data.append(' ')
            rating = re.findall(findRating, item)[0]
            data.append(float(rating))      # score
            judgeNum = re.findall(findJudge, item)[0]
            data.append(judgeNum)       # comment_counts
            inq = re.findall(findInq, item)
            if len(inq) != 0:
                inq = inq[0].replace("。", "")
                data.append(inq)        # overviews
            else:
                data.append(" ")
            bd = re.findall(findBd, item)[0]
            bd = re.sub('<br(\s+)?/>(\s+)?', "", bd)
            bd = re.sub('/', "", bd)
            data.append(bd.strip())     # about_msg
            datalist.append(data)

    return datalist


# 得到指定一个URL的网页内容
def askURL(url):
    head = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
    }
    request = urllib.request.Request(url, headers=head)
    html = ""
    try:
        response = urllib.request.urlopen(request)
        html = response.read().decode("utf-8")
    except urllib.error.URLError as e:
        if hasattr(e, "code"):
            print(e.code)
        if hasattr(e, "reason"):
            print(e.reason)
    return html


# 保存数据到xls表格
def saveData(dataList, savePath):
    print("save xls .......")
    book = xlwt.Workbook(encoding="utf-8",style_compression=0)  #创建workbook对象
    sheet = book.add_sheet('豆瓣电影Top250', cell_overwrite_ok=True)    #创建工作表
    col = ("电影详情链接","图片链接","影片中文名","影片外国名","评分","评价数","概况","相关信息")
    for i in range(0,8):
        sheet.write(0,i,col[i])  #列名
    for i in range(0,250):
        data = dataList[i]
        for j in range(0,8):
            sheet.write(i+1,j,data[j])  #数据
    book.save(savePath)

# 保存数据到PostgreSQL
def process_item(dataList):
    print("save PostgreSQL .......")
    conn = psycopg2.connect(database="training", user="postgres", password="123456", host="127.0.0.1", port="5432")
    try:
        cur = conn.cursor()

        sql = '''insert into dts.movie(movie_main_url, movie_pic_url, chinese_name, foreign_name, score, comment_counts, overviews, about_msg)
                 values %s '''
        sqlList = []
        for item in dataList:
            sqlList.append((item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7]))

        execute_values(cur, sql, sqlList, page_size=10000)

        conn.commit()

    except Exception as e:
            print('insert record into table failed')
            print(e)
    finally:
        if cur:
            cur.close()
    conn.close()


if __name__ == "__main__":
     main()
     print("【【【--------------------------------COMPLETE！--------------------------------】】】")
