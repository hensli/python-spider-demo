from datetime import datetime
import json
import time
import psycopg2
import requests
import pymysql
from apscheduler.schedulers.blocking import BlockingScheduler
from psycopg2.extras import execute_values

# A股
agUrl = "https://hq.cmschina.com/market/json?funcno=21000&version=1&sort=24&order=1&type=0%253A2%253A9%253A18&curPage=1&rowOfPage=8000&field=1%253A2%253A3%253A21%253A22%253A23%253A24%253A14%253A8%253A13%253A4%253A5%253A9%253A12%253A10%253A11%253A16%253A58%253A6%253A7%253A15%253A17%253A18%253A19%253A25%253A27%253A31%253A28%253A48&timeStamp=" + str(int(time.time()*1000))


def askURL(url):
    header = {
        "User-Agent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36',
        'Accept': '*/*',
        'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
        'Connection': 'keep-alive'
    }
    response = requests.get(url, headers=header)
    try:
        content = json.loads(response.text)
    except Exception as e:
        if hasattr(e, "code"):
            print(e.code)
        if hasattr(e, "reason"):
            print(e.reason)
    return content

def transferJson(url):
    dataList = []  # 用来存储写入DB的数据
    resultJson = askURL(url)

    if resultJson['errorNo'] == 0:
        for item in resultJson["results"]:
            data = []
            data.append(item[6])    # stock_code
            data.append(item[3])    # type
            data.append(item[4])    # stock_name
            data.append(item[0])    # increase
            data.append(item[1])    # current_price
            data.append(item[2])    # updown_amount
            dataList.append(data)
    else:
        print("拉取JSON异常......")
    return dataList

# 保存数据到PostgreSQL
def process_postgres(dataList):
    print("save PostgreSQL .......")
    conn = psycopg2.connect(database="stockdb", user="postgres", password="123456", host="127.0.0.1", port="5432")
    try:
        cur = conn.cursor()
        sql = '''insert into dts.stock_info(stock_code, type, stock_name, increase, current_price, updown_amount, created_dt, created_by, modified_dt, modified_by)
                 values %s '''
        sqlList = []
        for item in dataList:
            sqlList.append((item[0], item[1], item[2], item[3], item[4], item[5], "now()", "dts", "now()", "dts"))
        execute_values(cur, sql, sqlList, page_size=10000)
        conn.commit()
    except Exception as e:
            print('insert record into table failed')
            print(e)
    finally:
        if cur:
            cur.close()
    conn.close()

# 保存数据到MySQL
def process_mysql(dataList):
    # 数据库连接
    db = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='root',db='stockdb', charset='utf8')
    cursor = db.cursor()    # 使用cursor()方法获取操作游标

    createdDt = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sql = '''replace into stock_info(stock_code, type, stock_name, increase, current_price, updown_amount, created_dt)
                    values (%s,%s,%s,%s,%s,%s,%s) '''
    sqlList = []
    for item in dataList:
        sqlList.append((item[0], item[1], item[2], item[3], item[4], item[5], createdDt))
    try:
        insert = cursor.executemany(sql, tuple(sqlList))     # 批量执行SQL
        db.commit()     # 提交到数据库执行
        print('replace into 受影响的行数: ', insert)
    except:
        db.rollback()   # 如果发生错误则回滚
    db.close()  # 关闭数据库连接

def main():
    dataList = transferJson(agUrl)
    # process_postgres(dataList)
    process_mysql(dataList)

# 输出时间
def job():
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    ts = int(time.time() * 1000)
    main()
    print("执行时间：" + str(int(time.time() * 1000 - ts)))


if __name__ == "__main__":
    # 启动定时器 20s 执行一次
    scheduler = BlockingScheduler()
    scheduler.add_job(job, "cron", day_of_week="1-5", hour="9-12", second=0)
    scheduler.add_job(job, "cron", day_of_week="1-5", hour="9-12", second=20)
    scheduler.add_job(job, "cron", day_of_week="1-5", hour="9-12", second=40)
    scheduler.add_job(job, "cron", day_of_week="1-5", hour="13-15", second=0)
    scheduler.add_job(job, "cron", day_of_week="1-5", hour="13-15", second=20)
    scheduler.add_job(job, "cron", day_of_week="1-5", hour="13-15", second=40)
    scheduler.start()
